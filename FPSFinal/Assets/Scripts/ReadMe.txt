# 🎮 HowFrame — 为 Unity 独立开发者打造的轻量级游戏框架

一个简单、高效、高性能的 Unity 小游戏开发框架，专注本地运行，帮助你专心打造玩法与内容。

## 🧩 功能模块一览

- **底层系统**：存档系统、资源加载、事件中心、数据管理等  
- **前端系统**：音效控制、动态 UI、语言本地化、Volume 后处理等

## 🚫 不包含内容

- 无热更新框架  
- 无联网 / 服务器依赖  
→ 适用于 **小体量、单机、快速迭代** 的游戏项目

## 👤 适用人群

- 独立开发者
- Unity 学习者
- 小团队原型开发 / 内部工具框架搭建

---

✨ **觉得不错？点个 Star ⭐️ 支持一下吧！更新新功能时更容易找到我 ovo**
==============================================
框架由四部分组成
1.StaticAssistant 提供底层功能的静态工具类
-	AssetAssistant		:用于从Resources和StreamingAssets 中得到各种资源
-	DataAssistant		:用于将结构体或类进行序列化或者反序列化为加密二进制或者json
-	DebugAssistant		:提供对所有类型的拓展方法 T.log() 相比Debug.log()更直接并且有解嵌套能力
-	EventAssistant		:提供全局的事件注册于调用方法,主要针对Action, 也支持带参数和返回值
-	KeyAssistant 		:提供配置按键的能力,以及"改键位"和保存的方法
-	MonoAssistant		:将monobehavior的每帧执行公开为事件,方便一般类去注册
-	SceneLoadAssistant	:提供异步的切换关卡方法,支持按任意键进入关卡以及得到关卡加载量
-	TypeAssistant		:提供运行时的动态获取类型的实例化的能力,只需要给目标类打上 IRuntimeGet 接口

//按键初始化所要的配置文件为存于Asset/StreamingAsset/Config里的KeyConfig

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

2.Data 为游戏需要的存档数据提供数据类
-	xxxData			:供全局访问的静态数据信息
-	xxxDataInfo 		:相关数据类本身的定义所在
-	DataManager 		:封装了所有数据的读写方法

//数据初始化所要的配置文件为存于Asset/StreamingAsset/Config里的配置文件

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

3.ObjectTool 提供一些对象工具
-	ObjectPool		:对象池基类, ObjectPool<P, O> 实现时 P为对象池本身,O为对象本身
-	SingleTon 		:提供对mono和一般类的单例快速实现

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
4.Interaction 交互层 提供最直接的开发便捷
-	AudioManager		:通过简单API 比如 AddSound()在语句行内动态添加音效 或音乐
-	CameraEffect		:提供绑定渲染摄像机 ,并且提供一系列的后处理方法
-	LanguageManager	:提供全局的文本调用方法,可以用来实现多种语言
-	UIManager 		:提供对UI预制体的动态加载与卸载

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

上述是对主要脚本的功能简要说明,更细节的用法会在 ExampleScene 里面展示
另外,这是一个比较底层开发的框架,根据不同项目可能需要再做对应封装或者简化.



# 🎮 HowFrame — 为 Unity 独立开发者打造的轻量级游戏框架

一个简单、高效、高性能的 Unity 小游戏开发框架，专注本地运行，帮助你专心打造玩法与内容。

## 🧩 功能模块一览

- **底层系统**：存档系统、资源加载、事件中心、数据管理等  
- **前端系统**：音效控制、动态 UI、语言本地化、Volume 后处理等

## 🚫 不包含内容

- 无热更新框架  
- 无联网 / 服务器依赖  
→ 适用于 **小体量、单机、快速迭代** 的游戏项目

## 👤 适用人群

- 独立开发者
- Unity 学习者
- 小团队原型开发 / 内部工具框架搭建

---

✨ **觉得不错？点个 Star ⭐️ 支持一下吧！更新新功能时更容易找到我 ovo**
==============================================
框架由四部分组成
1.StaticAssistant 提供底层功能的静态工具类
-	AssetAssistant		:用于从Resources和StreamingAssets 中得到各种资源
-	DataAssistant		:用于将结构体或类进行序列化或者反序列化为加密二进制或者json
-	DebugAssistant		:提供对所有类型的拓展方法 T.log() 相比Debug.log()更直接并且有解嵌套能力
-	EventAssistant		:提供全局的事件注册于调用方法,主要针对Action, 也支持带参数和返回值
-	KeyAssistant 		:提供配置按键的能力,以及"改键位"和保存的方法
-	MonoAssistant		:将monobehavior的每帧执行公开为事件,方便一般类去注册
-	SceneLoadAssistant	:提供异步的切换关卡方法,支持按任意键进入关卡以及得到关卡加载量
-	TypeAssistant		:提供运行时的动态获取类型的实例化的能力,只需要给目标类打上 IRuntimeGet 接口

//按键初始化所要的配置文件为存于Asset/StreamingAsset/Config里的KeyConfig

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

2.Data 为游戏需要的存档数据提供数据类
-	xxxData			:供全局访问的静态数据信息
-	xxxDataInfo 		:相关数据类本身的定义所在
-	DataManager 		:封装了所有数据的读写方法

//数据初始化所要的配置文件为存于Asset/StreamingAsset/Config里的配置文件

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

3.ObjectTool 提供一些对象工具
-	ObjectPool		:对象池基类, ObjectPool<P, O> 实现时 P为对象池本身,O为对象本身
-	SingleTon 		:提供对mono和一般类的单例快速实现

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
4.Interaction 交互层 提供最直接的开发便捷
-	AudioManager		:通过简单API 比如 AddSound()在语句行内动态添加音效 或音乐
-	CameraEffect		:提供绑定渲染摄像机 ,并且提供一系列的后处理方法
-	LanguageManager	:提供全局的文本调用方法,可以用来实现多种语言
-	UIManager 		:提供对UI预制体的动态加载与卸载

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

上述是对主要脚本的功能简要说明,更细节的用法会在 ExampleScene 里面展示
另外,这是一个比较底层开发的框架,根据不同项目可能需要再做对应封装或者简化.













